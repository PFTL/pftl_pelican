<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Python For The Lab</title><link>https://pythonforthelab.com/</link><description></description><lastBuildDate>Sat, 27 Mar 2021 00:00:00 +0100</lastBuildDate><item><title>Instructions to build the Python for the Lab DAQ</title><link>https://pythonforthelab.com/blog/instructions-to-build-the-python-for-the-lab-daq/</link><description>&lt;p&gt;The PFTL DAQ is the ideal companion to follow the book &lt;a href="https://www.pythonforthelab.com/books/"&gt;Python for the Lab&lt;/a&gt;. Building the device itself is not part of the book because it focuses on Python best practices and not on lower-level electronics. In this article, we will quickly see how to build the device to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sat, 27 Mar 2021 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2021-03-27:/blog/instructions-to-build-the-python-for-the-lab-daq/</guid><category>blog</category><category>DAQ</category><category>PFTL</category><category>darduino due</category></item><item><title>Using slots in Python: limit dynamic attribute creation and improve speed</title><link>https://pythonforthelab.com/blog/using-slots-in-python-limit-dynamic-attribute-creation-and-improve-speed</link><description>&lt;p&gt;When we create classes, one of the biggest challenges is understanding how to handle dynamic attribute creation. Slots have the benefit of limiting attribute creation at runtime. In this article, we will explore how slots work, including a quick overview of how classes store attributes internally. &lt;/p&gt;
&lt;h2&gt;Dynamic attribute creation&lt;/h2&gt;
&lt;p&gt;One …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sun, 21 Mar 2021 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2021-03-21:/blog/using-slots-in-python-limit-dynamic-attribute-creation-and-improve-speed</guid><category>blog</category><category>classes</category><category>object oriented</category><category>dictionary</category><category>memory</category><category>slots</category></item><item><title>Acquiring images from Basler Cameras</title><link>https://pythonforthelab.com/blog/getting-started-with-basler-cameras</link><description>&lt;p&gt;Basler offers a wide range of cameras that can be used for microscopy, computer vision, or even as security cameras. One of the cameras' advantages is that they come with a software development kit that makes them easy to integrate into our projects. Basler puts continuous effort into maintaining PyPylon …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sat, 27 Feb 2021 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2021-02-27:/blog/getting-started-with-basler-cameras</guid><category>blog</category><category>microscopy</category><category>video</category><category>pypylon</category><category>camera</category><category>basler</category></item><item><title>Singletons: Instantiate objects only once</title><link>https://pythonforthelab.com/blog/singletons-instantiate-objects-only-once</link><description>&lt;p&gt;When developing more extensive programs, being aware of different patterns can significantly help us solve problems even before they arise. One of those patterns is the creation of singletons, which are nothing else but objects that can be instantiated only once. In Python, we are exposed to singletons since the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sat, 16 Jan 2021 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2021-01-16:/blog/singletons-instantiate-objects-only-once</guid><category>blog</category><category>instance</category><category>objects</category><category>pattern</category><category>object oriented</category><category>singleton</category></item><item><title>Differences of Multiprocessing on Windows and Linux</title><link>https://pythonforthelab.com/blog/differences-between-multiprocessing-windows-and-linux</link><description>&lt;p&gt;Multiprocessing is an excellent package if you ever want to speed up your code without leaving Python. When I started working with multiprocessing, I was unaware of the differences between Windows and Linux, which set me back several weeks of development time on a relatively big project. Let's quickly see …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sat, 13 Jun 2020 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2020-06-13:/blog/differences-between-multiprocessing-windows-and-linux</guid><category>tips</category><category>multiprocessing</category><category>windows</category><category>linux</category><category>tips</category></item><item><title>Python Tip: Using Else with Loops</title><link>https://pythonforthelab.com/blog/python-tip-using-else-loops</link><description>&lt;p&gt;Most likely, you are aware of how to use the &lt;code&gt;else&lt;/code&gt; statement with an &lt;code&gt;if&lt;/code&gt; clause. However, Python also allows us to use them with loops. They are straightforward to understand and open some exciting possibilities. Before continuing, remember that &lt;code&gt;else&lt;/code&gt; in this context should be called &lt;code&gt;no-break&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Let's quickly …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 25 May 2020 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2020-05-25:/blog/python-tip-using-else-loops</guid><category>tips</category><category>loops</category><category>for</category><category>while</category><category>else</category><category>tips</category></item><item><title>Python Tip: Ready to Publish Matplotlib Figures</title><link>https://pythonforthelab.com/blog/python-tip-ready-publish-matplotlib-figures</link><description>&lt;p&gt;Saving figures for publications, presentations, books, or websites can be a cumbersome task but doesn't need to be. In this &lt;strong&gt;Python Tip&lt;/strong&gt;, we will see how to create images using Matplotlib that are ready to be embedded. We will take care of the most important aspects: shape, font sizes, and …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 18 May 2020 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2020-05-18:/blog/python-tip-ready-publish-matplotlib-figures</guid><category>tips</category><category>matplotlib</category><category>resolution</category><category>figure</category><category>plot</category><category>saving</category></item><item><title>Data Descriptors: Bringing Attributes to the Next level</title><link>https://pythonforthelab.com/blog/data-descriptors-bringing-attributes-next-level</link><description>&lt;p&gt;Descriptors in Python allow us to control how attributes of classes are accessed or modified. A pattern often encountered is defining properties to use setter and getter methods encapsulated as if they were a single attribute. In this article, we will dig into how the property decorator works, to understand …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sat, 16 May 2020 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2020-05-16:/blog/data-descriptors-bringing-attributes-next-level</guid><category>blog</category><category>data</category><category>decorator</category><category>pattern</category><category>description</category><category>property</category></item><item><title>Python Tips: Using Sets</title><link>https://pythonforthelab.com/blog/python-tips-using-sets</link><description>&lt;p&gt;Most people are familiar with lists, tuples, and dictionaries as the basic data types for grouping information. However, there is another convenient option: &lt;strong&gt;sets&lt;/strong&gt;. They are directly linked to the mathematical idea of a &lt;em&gt;set&lt;/em&gt;. To define them, we can use the following syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;var = {1, 2, 3, 4}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 11 May 2020 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2020-05-11:/blog/python-tips-using-sets</guid><category>tips</category><category>data types</category><category>tips</category><category>iterables</category></item><item><title>Generators, Iterables, Iterators in Python: When and Where</title><link>https://pythonforthelab.com/blog/generators-iterables-iterators-python-when-and-where</link><description>&lt;p&gt;Generators, Iterables, and Iterators are some of the most used tools in Python. However, we don't often stop to think about how they work, how we can develop our generators and iterables. Once you learn what you can do with them, it is possible to expand your toolbox and make …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Fri, 10 Apr 2020 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2020-04-10:/blog/generators-iterables-iterators-python-when-and-where</guid><category>blog</category><category>driver</category><category>arduino</category><category>control</category></item><item><title>How to control an Arduino from the computer using Python</title><link>https://pythonforthelab.com/blog/how-control-arduino-computer-using-python</link><description>&lt;p&gt;Arduinos may be one of the most disruptive electronic developments of the past decade. They opened a world of possibilities to quickly prototype solutions in professional settings but also opened the door for enthusiasts to learn about electronics and microcontrollers. In this article, we are going to see how to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Tue, 04 Feb 2020 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2020-02-04:/blog/how-control-arduino-computer-using-python</guid><category>blog</category><category>driver</category><category>arduino</category><category>control</category></item><item><title>How to create a setup file for your project</title><link>https://pythonforthelab.com/blog/how-create-setup-file-your-project</link><description>&lt;p&gt;When you develop software, at some point you will want other people to be able to use what you have built. Sometimes it is handy if you can quickly use the code you developed yourself in the past on a new machine or a different virtual environment. We have already …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 20 Jan 2020 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2020-01-20:/blog/how-create-setup-file-your-project</guid><category>blog</category><category>environment</category><category>path</category><category>setup</category><category>install</category><category>package</category></item><item><title>Complete Guide to Imports in Python: Absolute, Relative, and More</title><link>https://pythonforthelab.com/blog/complete-guide-to-imports-in-python-absolute-relative-and-more</link><description>&lt;p&gt;Importing is not only a matter of using external libraries, it also allows you to keep your code clean and organized. In
this tutorial, we are going to discuss from the very basics of importing to complex topics such as lazy loading of
modules in packages.&lt;/p&gt;
&lt;h2&gt;Introduction to importing&lt;/h2&gt;
&lt;p&gt;In …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Fri, 04 Oct 2019 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-10-04:/blog/complete-guide-to-imports-in-python-absolute-relative-and-more</guid><category>blog</category><category>importing</category><category>import</category><category>relative</category><category>absolute</category><category>package</category></item><item><title>Handling and Sharing Data Between Threads</title><link>https://pythonforthelab.com/blog/handling-and-sharing-data-between-threads</link><description>&lt;p&gt;When working with threads in Python, you will find very useful to be
able to share data between different tasks. One of the advantages of
threads in Python is that they share the same memory space, and thus
exchanging information is relatively easy. However, some structures can
help you achieve …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Tue, 06 Aug 2019 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-08-06:/blog/handling-and-sharing-data-between-threads</guid><category>blog</category><category>threading</category><category>data</category><category>queue</category><category>sharing</category><category>threads</category><category>async</category><category>multithreading</category></item><item><title>Starting and Synchronizing Threads</title><link>https://pythonforthelab.com/blog/starting-and-synchronizing-threads</link><description>&lt;p&gt;If you have developed code for long enough, probably you have faced the
situation in which a task takes longer to complete and in the meantime,
your program can't perform any other task. Most likely you can't even
politely cancel what the program is doing, you will have to resort …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Tue, 06 Aug 2019 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-08-06:/blog/starting-and-synchronizing-threads</guid><category>blog</category><category>threads</category><category>async</category><category>multithreading</category><category>parallel</category></item><item><title>Monkey Patching and its consequences</title><link>https://pythonforthelab.com/blog/monkey-patching-and-its-consequences</link><description>&lt;p&gt;Monkey patching is a technique that allows you to alter the behavior of
objects at runtime. Even though it can be a very useful feature, it can
also make your code much harder to understand and debug, and therefore
you have to be careful with how you implement monkey patching …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Tue, 18 Jun 2019 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-06-18:/blog/monkey-patching-and-its-consequences</guid><category>blog</category><category>functions</category><category>methods</category><category>monkey patching</category><category>replacing</category><category>extending</category><category>mutable</category><category>immutable</category></item><item><title>Duck Typing, or how to check variable types</title><link>https://pythonforthelab.com/blog/duck-typing-or-how-to-check-variable-types</link><description>&lt;p&gt;The name duck typing has its root in &lt;a href="https://en.wikipedia.org/wiki/Duck_typing"&gt;the
expression&lt;/a&gt; &lt;em&gt;If it walks like
a duck and it quacks like a duck, then it must be a duck&lt;/em&gt;. Which means
that if you want to know whether you are dealing with a duck or not, you
only care about how …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Tue, 11 Jun 2019 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-06-11:/blog/duck-typing-or-how-to-check-variable-types</guid><category>blog</category><category>functions</category><category>methods</category><category>dynamic language</category><category>typing</category><category>types</category></item><item><title>Introduction to Python Lambda Functions</title><link>https://pythonforthelab.com/blog/intro-to-python-lambda-functions</link><description>&lt;p&gt;Some time ago, Python introduced in its syntax the possibility to define
functions using &lt;code&gt;lambda&lt;/code&gt; instead of &lt;code&gt;def&lt;/code&gt;. These functions are called
anonymous and are very common in other languages such as Javascript.
However, in Python, they seem a bit obscure and are often either
overlooked or misused. In this …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sun, 17 Mar 2019 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-03-17:/blog/intro-to-python-lambda-functions</guid><category>blog</category><category>functions</category><category>methods</category><category>arguments</category><category>packing</category><category>unpacking</category><category>args</category><category>kwargs</category></item><item><title>What are args and kwargs and when to use them</title><link>https://pythonforthelab.com/blog/what-are-args-and-kwargs-and-when-to-use-them</link><description>&lt;p&gt;If you have worked with Python for long enough, probably you have
encountered code that uses &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; as arguments in
functions. Even if you haven't, it is a very neat feature that allows
you to achieve great flexibility while developing code. In this article,
we are going to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sun, 10 Mar 2019 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-03-10:/blog/what-are-args-and-kwargs-and-when-to-use-them</guid><category>blog</category><category>functions</category><category>methods</category><category>arguments</category><category>packing</category><category>unpacking</category><category>args</category><category>kwargs</category></item><item><title>Using pyZMQ for inter-process communication: Part 2</title><link>https://pythonforthelab.com/blog/using-pyzmq-for-inter-process-communication-part-2</link><description>&lt;p&gt;In this article, we are going to cover how you can leverage the
possibilities of ZMQ to exchange data between different processes in
Python. We have covered the &lt;a href="https://pythonforthelab.com/blog/using-pyzmq-for-inter-process-communication-part-1"&gt;basics of pyZMQ&lt;/a&gt;
in part 1. This is a fairly advanced tutorial, in which we are not only
going to use pyZMQ …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Tue, 05 Mar 2019 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-03-05:/blog/using-pyzmq-for-inter-process-communication-part-2</guid><category>blog</category><category>ZMQ</category><category>Socket</category><category>Communication</category><category>Parallel</category><category>Data</category></item><item><title>Building a CRM with Jupyter Notebooks</title><link>https://pythonforthelab.com/blog/building-a-crm-with-jupyter-notebooks</link><description>&lt;p&gt;This tutorial is going to be off-topic compared to the others on the
website. It was born out of a question regarding how to send
personalized e-mails to several people on a list, and I thought it could
be useful to post a tutorial online. This will help people interested …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Tue, 12 Feb 2019 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-02-12:/blog/building-a-crm-with-jupyter-notebooks</guid><category>blog</category><category>CRM</category><category>Jupyter</category><category>Databases</category><category>Relational</category><category>SQLAlchemy</category><category>SQLite</category><category>Customers</category><category>email</category></item><item><title>Deep and Shallow Copies of Objects</title><link>https://pythonforthelab.com/blog/deep-and-shallow-copies-of-objects</link><description>&lt;p&gt;Copying objects in Python seems like a trivial task, but it can have
unexpected implications in your programs. Copying data may be achieved
by either duplicating the data or by storing references to the objects,
having a much lower impact on the memory. In this article, we are going
to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 04 Feb 2019 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-02-04:/blog/deep-and-shallow-copies-of-objects</guid><category>blog</category><category>Data</category><category>Types</category><category>Mutable</category><category>Immutable</category><category>Objects</category><category>Copy</category><category>Memory</category></item><item><title>The with command and custom classes</title><link>https://pythonforthelab.com/blog/the-with-command-and-custom-classes</link><description>&lt;p&gt;There is a common pattern when programming that is opening a resource,
doing something with it and closing it. This is what you normally do
with a file, a network connection or a device. Python offers you a
command to handle this pattern: the 'with' context manager. In this
article …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sat, 02 Feb 2019 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2019-02-02:/blog/the-with-command-and-custom-classes</guid><category>blog</category><category>Context Manager</category><category>With</category><category>Custom Classes</category><category>Patterns</category></item><item><title>Using pyZMQ for inter-process communication: Part 1</title><link>https://pythonforthelab.com/blog/using-pyzmq-for-inter-process-communication-part-1</link><description>&lt;p&gt;Working with threads and processes in Python (and in any other language)
always posses the challenge on how to exchange information between them.
We are not talking about parallelizing code in a traditional way, where
an expensive computation is spread through different cores, but rather
being able to share the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 17 Dec 2018 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-12-17:/blog/using-pyzmq-for-inter-process-communication-part-1</guid><category>blog</category><category>ZMQ</category><category>Socket</category><category>Communication</category><category>Parallel</category><category>Data</category></item><item><title>PyNTA: Nanoparticle Tracking Analysis</title><link>https://pythonforthelab.com/blog/pynta-nanoparticle-tracking-analysis</link><description>&lt;p&gt;&lt;a href="https://pypi.org/project/pynta/"&gt;PyNTA&lt;/a&gt; is a program that aims at
bridging the gap between data acquisition and analysis for experiments
of nanoparticle tracking. PyNTA is my first public release of a package
on PyPI, the Python repository. It is a desktop application that can be
used to record images from a camera, track …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Fri, 14 Dec 2018 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-12-14:/blog/pynta-nanoparticle-tracking-analysis</guid><category>blog</category><category>Nanoparticle</category><category>Tracking</category><category>Analysis</category><category>Release</category><category>Package</category><category>Desktop</category><category>Experiment</category></item><item><title>Step by Step Guide to Building a GUI</title><link>https://pythonforthelab.com/blog/step-by-step-guide-to-building-a-gui</link><description>&lt;p&gt;In this tutorial, we are going to build a Graphical User Interface (GUI)
to acquire images from your webcam. We are going to use OpenCV to
quickly acquire an image from your camera and PyQt5 to build the user
interface. You may find a lot of tutorials online on how …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 27 Aug 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-08-27:/blog/step-by-step-guide-to-building-a-gui</guid><category>blog</category><category>PyQt</category><category>PyQt5</category><category>Qt</category><category>GUI</category><category>OpenCV</category><category>webcam</category><category>User Interface</category></item><item><title>What are Hashable Objects</title><link>https://pythonforthelab.com/blog/what-are-hashable-objects</link><description>&lt;p&gt;To understand hashable objects in Python, it is important to review what
a hash table is. Following &lt;a href="https://en.wikipedia.org/wiki/Hash_table"&gt;the article on
Wikipedia&lt;/a&gt;, a hash table is a
data structure that can map keys to values and that implements a hash
function to compute the index to an array of buckets or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 27 Aug 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-08-27:/blog/what-are-hashable-objects</guid><category>blog</category><category>Hashable</category><category>Objects</category><category>Dictionaries</category><category>Hash</category></item><item><title>Mutable and Immutable Attributes of Classes</title><link>https://pythonforthelab.com/blog/mutable-and-immutable-attributes-of-classes</link><description>&lt;p&gt;We have seen how to leverage the differences between &lt;a href="https://pythonforthelab.com/blog/mutable-and-immutable-objects"&gt;mutable and
immutable objects&lt;/a&gt; and what
happens when you use mutable types as default function arguments.
However, we haven't discussed what happens when you use mutable types as
default attributes of classes.&lt;/p&gt;
&lt;p&gt;Default values for attributes can be defined in different …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Fri, 24 Aug 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-08-24:/blog/mutable-and-immutable-attributes-of-classes</guid><category>blog</category><category>Data</category><category>Types</category><category>Mutable</category><category>Immutable</category><category>Tuples</category></item><item><title>Mutable or Immutable Tuples</title><link>https://pythonforthelab.com/blog/mutable-or-immutable-tuples</link><description>&lt;p&gt;Broadly speaking, Python variables belong to one of two types:
&lt;strong&gt;mutable&lt;/strong&gt; and &lt;strong&gt;immutable&lt;/strong&gt;. We have discussed this yesterday, in the
&lt;a href="https://pythonforthelab.com/blog/mutable-and-immutable-objects"&gt;Introduction To Mutable and Immutable Data
Types&lt;/a&gt;. The first one refers
to those elements that can be changed without the need of creating a new
one, while the latter refers …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Fri, 24 Aug 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-08-24:/blog/mutable-or-immutable-tuples</guid><category>blog</category><category>Data</category><category>Types</category><category>Mutable</category><category>Immutable</category><category>Tuples</category></item><item><title>Mutable and Immutable Objects</title><link>https://pythonforthelab.com/blog/mutable-and-immutable-objects</link><description>&lt;p&gt;People who start programming in Python quickly stumble upon the
existence of lists and tuples. They are defined in a similar way, they
look the same. Sometimes they are even used interchangeably. The obvious
question is, therefore, why do you have two different types of elements
for the same goal …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Thu, 23 Aug 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-08-23:/blog/mutable-and-immutable-objects</guid><category>blog</category><category>Data</category><category>Types</category><category>Mutable</category><category>Immutable</category><category>Objects</category></item><item><title>Storing Data with SQLite</title><link>https://pythonforthelab.com/blog/storing-data-with-sqlite</link><description>&lt;p&gt;Using databases for storing data may sound much more complicated than
what it actually is. In this article, we are going to cover how to use
databases to store different types of data. We will quickly review how
you can search for specific parameters and how to get exactly what …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sun, 12 Aug 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-08-12:/blog/storing-data-with-sqlite</guid><category>blog</category><category>Data</category><category>Storing</category><category>SQLite</category><category>HDF5</category><category>ascii</category><category>json</category><category>Data Storage</category></item><item><title>Storing Binary Data and Serializing</title><link>https://pythonforthelab.com/blog/storing-binary-data-and-serializing</link><description>&lt;p&gt;Last week we have seen how to store data into plain text files that can
be read by any editor or by other programs. We have also seen that if
you separate your data with commas your file will follow a standard and
it will be automatically compatible with other …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Sat, 11 Aug 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-08-11:/blog/storing-binary-data-and-serializing</guid><category>blog</category><category>Data</category><category>Storing</category><category>SQLite</category><category>HDF5</category><category>ascii</category><category>json</category><category>Data Storage</category></item><item><title>Introduction to Storing Data in Files</title><link>https://pythonforthelab.com/blog/introduction-to-storing-data-in-files</link><description>&lt;p&gt;Storing data to reuse it later is a central part in most Python
applications. Whether you are doing a measurement in the lab or
developing a web application, you will need to save information in a
persistent way. For example, you would like to analyze your results
after you have …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Fri, 10 Aug 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-08-10:/blog/introduction-to-storing-data-in-files</guid><category>blog</category><category>Data</category><category>Storing</category><category>SQLite</category><category>HDF5</category><category>ascii</category><category>json</category><category>Data Storage</category></item><item><title>Learning (not) to Handle Exceptions</title><link>https://pythonforthelab.com/blog/learning-not-to-handle-exceptions</link><description>&lt;p&gt;When you develop code, it is almost impossible not to run into an
error. Some problems are going to arise as soon as you start your
program, for example, if you forgot to close a parenthesis, or forgot
the &lt;code&gt;:&lt;/code&gt; after an if-statement. However, errors at runtime are also
very frequent …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 04 Jun 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-06-04:/blog/learning-not-to-handle-exceptions</guid><category>blog</category><category>Exceptions</category><category>Errors</category><category>Try</category><category>Except</category><category>Catch</category><category>Handling</category></item><item><title>Documenting with Sphinx and Readthedocs</title><link>https://pythonforthelab.com/blog/documenting-with-sphinx-and-readthedocs</link><description>&lt;p&gt;If you have ever followed a guide on how to start programming, most
likely you have encounter reflections about the importance of adding
comments to your code. Comments allow you to understand what the
developer was thinking when programming, maybe left some traces of what
could be improved. If you …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Thu, 31 May 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-05-31:/blog/documenting-with-sphinx-and-readthedocs</guid><category>blog</category><category>Threads</category><category>Processes</category><category>Parallel</category><category>Speed</category><category>Async</category><category>Advanced</category></item><item><title>Implementing Threads for Measurements</title><link>https://pythonforthelab.com/blog/implementing-threads-for-measurements</link><description>&lt;p&gt;Probably you have run into the problem of wanting to update a plot while
acquiring a signal, but finding that Python is busy during the
acquisition. This happens, for example, when functions or methods take
long to execute and you can't regain control until it is done. Python
has at …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Tue, 29 May 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-05-29:/blog/implementing-threads-for-measurements</guid><category>blog</category><category>Threads</category><category>Processes</category><category>Parallel</category><category>Speed</category><category>Async</category><category>Advanced</category></item><item><title>A Primer on Classes in Python</title><link>https://pythonforthelab.com/blog/a-primer-on-classes-in-python</link><description>&lt;p&gt;Python is an object-oriented programming (OOP) language. Object-oriented
programming is a programming design that allows developers not only to
define the type of data of a variable but also the operations that can
act on that data. For example, a variable can be of type integer, float,
string, etc. We …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Tue, 22 May 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-05-22:/blog/a-primer-on-classes-in-python</guid><category>blog</category><category>Classes</category><category>Object oriented</category><category>beginner</category></item><item><title>How to use decorators Part 2</title><link>https://pythonforthelab.com/blog/how-to-use-decorators-part-2</link><description>&lt;p&gt;Decorators are a very useful programming pattern that allows changing
the behavior of functions with little refactoring. Decorators allow
developers to abstract common options from functions, but mastering
their use in Python can be challenging. In this article, we are going to
go in depth regarding different options when implementing …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Fri, 18 May 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-05-18:/blog/how-to-use-decorators-part-2</guid><category>blog</category><category>Decorators</category><category>Tricks</category><category>Validation</category><category>Data</category><category>Intermediate</category></item><item><title>How to use HDF5 files in Python</title><link>https://pythonforthelab.com/blog/how-to-use-hdf5-files-in-python</link><description>&lt;p&gt;When dealing with large amounts of data, either experimental or simulated, saving it to several text files is not very efficient. Sometimes you need to access a specific subset of the dataset, and you don't want to load it all to memory. If you are looking for a solution that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 19 Mar 2018 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-03-19:/blog/how-to-use-hdf5-files-in-python</guid><category>blog</category><category>pyhdf</category><category>HDF5</category><category>data</category><category>file</category><category>storing</category></item><item><title>How to Use Decorators to Validate Input</title><link>https://pythonforthelab.com/blog/how-to-use-decorators-to-validate-input</link><description>&lt;p&gt;Python is rich in resources that can shorten the time it takes to
develop new programs and simplify repetitive tasks. Decorators are one
of such elements but more often than not they are not considered by less
experienced developers. Adding decorators to the syntactic toolbox can
be of great use …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Mon, 12 Mar 2018 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-03-12:/blog/how-to-use-decorators-to-validate-input</guid><category>blog</category><category>Decorators</category><category>Python</category><category>Tricks</category><category>Validation</category><category>Data</category></item><item><title>Virtual Environment is a Must-Have Tool</title><link>https://pythonforthelab.com/blog/virtual-environment-is-a-must-have-tool</link><description>&lt;p&gt;When you start developing software, it is of utmost importance to have
an isolated programming environment in which you can control precisely
the packages installed. This will allow you, for example, to use
experimental libraries without overwriting software that other programs
use on your computer. Isolated environments allow you, for …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Fri, 09 Mar 2018 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-03-09:/blog/virtual-environment-is-a-must-have-tool</guid><category>blog</category><category>Python</category><category>Virtual Environment</category><category>Development</category></item><item><title>How to Control a Device Through the Network</title><link>https://pythonforthelab.com/blog/how-to-control-a-device-through-the-network</link><description>&lt;p&gt;In the lab, it is common to find different computers connected to
specific devices. For example,when you keep older PCs which are able to
communicate with very specific hardware. You may also have different
computers when there are mobile instruments that you share among
different users. In these situations …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Wed, 28 Feb 2018 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-02-28:/blog/how-to-control-a-device-through-the-network</guid><category>blog</category><category>Network</category><category>Communication</category><category>Async</category><category>Remote Control</category><category>Devices</category><category>Drivers</category><category>Flask</category><category>Internet</category></item><item><title>How to Write a Driver with Lantz</title><link>https://pythonforthelab.com/blog/how-to-write-a-driver-with-lantz</link><description>&lt;p&gt;Lantz is a package written by several researchers who wanted to have a
framework to build instrumentation on Python. It is open source and
hosted &lt;a href="https://github.com/LabPy/lantz"&gt;on Github&lt;/a&gt;. Their description is
very clear:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lantz is an automation and instrumentation toolkit with a clean,
well-designed and consistent interface. It provides a core …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Fri, 23 Feb 2018 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-02-23:/blog/how-to-write-a-driver-with-lantz</guid><category>blog</category><category>Lantz</category><category>Beginner</category><category>Drivers</category><category>Devices</category></item><item><title>Controlling a National Instruments Card with Python</title><link>https://pythonforthelab.com/blog/controlling-a-national-instruments-card-with-python</link><description>&lt;p&gt;One of the most common devices in a lab is a National Instruments
acquisition card, also called a DAQ. As you probably know by now, the
default programming environment for such cards is Lab View, but what you
may not be aware is that there are libraries for interfacing with …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aquiles Carattino</dc:creator><pubDate>Wed, 21 Feb 2018 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:pythonforthelab.com,2018-02-21:/blog/controlling-a-national-instruments-card-with-python</guid><category>blog</category><category>National Instruments</category><category>DAQ</category><category>Control</category><category>NI DAQ</category><category>PyDAQmx</category></item></channel></rss>